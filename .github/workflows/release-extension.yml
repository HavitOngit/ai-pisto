name: Build & Release AI Pisto Extension

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to create (leave blank to only build artifact)"
        required: false
      override_version:
        description: "Override version (otherwise taken from manifest.json)"
        required: false

permissions:
  contents: write

jobs:
  pack:
    runs-on: ubuntu-latest
    env:
      EXT_DIR: extension # adjust if folder name differs
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate extension directory
        run: |
          if [ ! -d "$EXT_DIR" ]; then
            echo "::error::Extension directory '$EXT_DIR' not found."; exit 1; fi
          ls -la "$EXT_DIR"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read version from manifest
        id: manifest
        run: |
          if [ -n "${{ github.event.inputs.override_version }}" ]; then
            VERSION='${{ github.event.inputs.override_version }}'
          else
            VERSION=$(jq -r '.version' "$EXT_DIR/manifest.json")
          fi
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine tag name
        id: tagmeta
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            SOURCE="push-tag"
          elif [[ -n "${{ github.event.inputs.tag }}" ]]; then
            TAG_NAME='${{ github.event.inputs.tag }}'
            SOURCE="dispatch-input"
          else
            # default derive from version
            VERSION_FILE=$(jq -r '.version' "$EXT_DIR/manifest.json")
            TAG_NAME="v${VERSION_FILE}"
            SOURCE="derived-from-version"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "tag_source=$SOURCE" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG_NAME (source: $SOURCE)"

      - name: Create tag if needed
        if: ${{ steps.tagmeta.outputs.tag_source != 'push-tag' }}
        run: |
          git tag -f "${{ steps.tagmeta.outputs.tag_name }}"
          git push origin "refs/tags/${{ steps.tagmeta.outputs.tag_name }}" --force

      - name: Prepare zip
        run: |
          VERSION='${{ steps.manifest.outputs.version }}'
          mkdir -p dist
          (cd "$EXT_DIR" && zip -r "../dist/ai-pisto-$VERSION.zip" . -x '*.DS_Store' )
          ls -lh dist

      - name: Generate SHA256 checksum
        run: |
          VERSION='${{ steps.manifest.outputs.version }}'
          shasum -a 256 "dist/ai-pisto-$VERSION.zip" > "dist/ai-pisto-$VERSION.zip.sha256"
          cat dist/*.sha256

      - name: Upload artifact (workflow)
        uses: actions/upload-artifact@v4
        with:
          name: ai-pisto-extension-${{ steps.manifest.outputs.version }}
          path: |
            dist/ai-pisto-${{ steps.manifest.outputs.version }}.zip
            dist/ai-pisto-${{ steps.manifest.outputs.version }}.zip.sha256

      - name: Create / Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagmeta.outputs.tag_name }}
          name: AI Pisto v${{ steps.manifest.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/ai-pisto-${{ steps.manifest.outputs.version }}.zip
            dist/ai-pisto-${{ steps.manifest.outputs.version }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          VERSION='${{ steps.manifest.outputs.version }}'
          {
            echo "Packaged AI Pisto extension version $VERSION";
            echo "Release tag: ${{ steps.tagmeta.outputs.tag_name }} (source: ${{ steps.tagmeta.outputs.tag_source }})";
          } >> $GITHUB_STEP_SUMMARY
